/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { EventFragment, FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'

import type { OnEvent, PromiseOrValue, TypedEvent, TypedEventFilter, TypedListener } from '../common'

export declare namespace MockNFT {
  export type UpdateInputStruct = {
    price: PromiseOrValue<BigNumberish>
    vol: PromiseOrValue<BigNumberish>
    index: PromiseOrValue<BigNumberish>
  }

  export type UpdateInputStructOutput = [number, number, BigNumber] & {
    price: number
    vol: number
    index: BigNumber
  }
}

export interface MockNFTInterface extends utils.Interface {
  functions: {
    'ORACLE_REVISION()': FunctionFragment
    'addAssets(address[])': FunctionFragment
    'batchSetAssetPrice(uint256[],tuple[][])': FunctionFragment
    'getAddressList()': FunctionFragment
    'getAsset(address)': FunctionFragment
    'getAssetPrice(address)': FunctionFragment
    'getAssetVol(address)': FunctionFragment
    'getAssets(address[])': FunctionFragment
    'getIndexes(address)': FunctionFragment
    'initialize(address,address,address[])': FunctionFragment
    'isEmergencyAdmin(address)': FunctionFragment
    'operator()': FunctionFragment
    'owner()': FunctionFragment
    'paused()': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'replaceAsset(address,address)': FunctionFragment
    'setEmergencyAdmin(address,bool)': FunctionFragment
    'setOperator(address)': FunctionFragment
    'setPause(bool)': FunctionFragment
    'transferOwnership(address)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'ORACLE_REVISION'
      | 'addAssets'
      | 'batchSetAssetPrice'
      | 'getAddressList'
      | 'getAsset'
      | 'getAssetPrice'
      | 'getAssetVol'
      | 'getAssets'
      | 'getIndexes'
      | 'initialize'
      | 'isEmergencyAdmin'
      | 'operator'
      | 'owner'
      | 'paused'
      | 'renounceOwnership'
      | 'replaceAsset'
      | 'setEmergencyAdmin'
      | 'setOperator'
      | 'setPause'
      | 'transferOwnership'
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'ORACLE_REVISION', values?: undefined): string
  encodeFunctionData(functionFragment: 'addAssets', values: [PromiseOrValue<string>[]]): string
  encodeFunctionData(
    functionFragment: 'batchSetAssetPrice',
    values: [PromiseOrValue<BigNumberish>[], MockNFT.UpdateInputStruct[][]]
  ): string
  encodeFunctionData(functionFragment: 'getAddressList', values?: undefined): string
  encodeFunctionData(functionFragment: 'getAsset', values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'getAssetPrice', values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'getAssetVol', values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'getAssets', values: [PromiseOrValue<string>[]]): string
  encodeFunctionData(functionFragment: 'getIndexes', values: [PromiseOrValue<string>]): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string
  encodeFunctionData(functionFragment: 'isEmergencyAdmin', values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'operator', values?: undefined): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
  encodeFunctionData(functionFragment: 'replaceAsset', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string
  encodeFunctionData(
    functionFragment: 'setEmergencyAdmin',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string
  encodeFunctionData(functionFragment: 'setOperator', values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'setPause', values: [PromiseOrValue<boolean>]): string
  encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string

  decodeFunctionResult(functionFragment: 'ORACLE_REVISION', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'addAssets', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'batchSetAssetPrice', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getAddressList', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getAsset', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getAssetPrice', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getAssetVol', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getAssets', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getIndexes', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isEmergencyAdmin', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'operator', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'replaceAsset', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setEmergencyAdmin', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setOperator', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setPause', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result

  events: {
    'ChangeOperator(address,address)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
    'Paused(address)': EventFragment
    'ReplaceAsset(address,address)': EventFragment
    'SetAssetData(uint256[],tuple[][])': EventFragment
    'SetEmergencyAdmin(address,bool)': EventFragment
    'Unpaused(address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'ChangeOperator'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ReplaceAsset'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'SetAssetData'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'SetEmergencyAdmin'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment
}

export interface ChangeOperatorEventObject {
  oldOperator: string
  newOperator: string
}
export type ChangeOperatorEvent = TypedEvent<[string, string], ChangeOperatorEventObject>

export type ChangeOperatorEventFilter = TypedEventFilter<ChangeOperatorEvent>

export interface OwnershipTransferredEventObject {
  previousOwner: string
  newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface PausedEventObject {
  account: string
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>

export type PausedEventFilter = TypedEventFilter<PausedEvent>

export interface ReplaceAssetEventObject {
  oldAsset: string
  newAsset: string
}
export type ReplaceAssetEvent = TypedEvent<[string, string], ReplaceAssetEventObject>

export type ReplaceAssetEventFilter = TypedEventFilter<ReplaceAssetEvent>

export interface SetAssetDataEventObject {
  indexes: BigNumber[]
  inputs: MockNFT.UpdateInputStructOutput[][]
}
export type SetAssetDataEvent = TypedEvent<[BigNumber[], MockNFT.UpdateInputStructOutput[][]], SetAssetDataEventObject>

export type SetAssetDataEventFilter = TypedEventFilter<SetAssetDataEvent>

export interface SetEmergencyAdminEventObject {
  admin: string
  enabled: boolean
}
export type SetEmergencyAdminEvent = TypedEvent<[string, boolean], SetEmergencyAdminEventObject>

export type SetEmergencyAdminEventFilter = TypedEventFilter<SetEmergencyAdminEvent>

export interface UnpausedEventObject {
  account: string
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>

export interface MockNFT extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: MockNFTInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  populateTransaction: {
    mint(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
