/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { Provider, TransactionRequest } from '@ethersproject/providers'
import { Contract, ContractFactory, Overrides, Signer, utils } from 'ethers'

import type { PromiseOrValue } from '../../common'
import type { MockNFT, MockNFTInterface } from '../../contracts/MockNFT'

const _abi = [
  {
    inputs: [] as any,
    name: 'mint',
    outputs: [] as any,
    stateMutability: 'nonpayable',
    type: 'function',
  },
]

const _bytecode = ''

type MockNFTConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (xs: MockNFTConstructorParams): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1

export class MockNFT__factory extends ContractFactory {
  constructor(...args: MockNFTConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args)
    } else {
      super(_abi, _bytecode, args[0])
    }
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<MockNFT> {
    return super.deploy(overrides || {}) as Promise<MockNFT>
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {})
  }
  override attach(address: string): MockNFT {
    return super.attach(address) as MockNFT
  }
  override connect(signer: Signer): MockNFT__factory {
    return super.connect(signer) as MockNFT__factory
  }

  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): MockNFTInterface {
    return new utils.Interface(_abi) as MockNFTInterface
  }
  static connect(address: string, signerOrProvider: Signer | Provider): MockNFT {
    return new Contract(address, _abi, signerOrProvider) as MockNFT
  }
}
