/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../common'

export interface CallPoolInterface extends utils.Interface {
  functions: {
    'INVALID_PRICE()': FunctionFragment
    'balanceOf(address)': FunctionFragment
    'callToken()': FunctionFragment
    'changePreference(uint256,uint8,uint8,uint256)': FunctionFragment
    'checkAvailable(uint256)': FunctionFragment
    'collectProtocol(address,uint256)': FunctionFragment
    'deposit(address,uint256)': FunctionFragment
    'depositWithPreference(address,uint256,uint8,uint8,uint256)': FunctionFragment
    'exerciseCall(uint256)': FunctionFragment
    'exercisePeriodProportion()': FunctionFragment
    'factory()': FunctionFragment
    'getNFTStatus(uint256)': FunctionFragment
    'minimumPremiumToOwner()': FunctionFragment
    'nToken()': FunctionFragment
    'nft()': FunctionFragment
    'openCall(uint256,uint256,uint256)': FunctionFragment
    'openCallBatch(uint256[],uint256[],uint256[])': FunctionFragment
    'oracle()': FunctionFragment
    'pause()': FunctionFragment
    'paused()': FunctionFragment
    'premium()': FunctionFragment
    'previewOpenCall(uint256,uint256,uint256)': FunctionFragment
    'relistNFT(uint256)': FunctionFragment
    'takeNFTOffMarket(uint256)': FunctionFragment
    'totalOpenInterest()': FunctionFragment
    'unpause()': FunctionFragment
    'withdraw(address,uint256)': FunctionFragment
    'withdrawETH(address,uint256)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'INVALID_PRICE'
      | 'balanceOf'
      | 'callToken'
      | 'changePreference'
      | 'checkAvailable'
      | 'collectProtocol'
      | 'deposit'
      | 'depositWithPreference'
      | 'exerciseCall'
      | 'exercisePeriodProportion'
      | 'factory'
      | 'getNFTStatus'
      | 'minimumPremiumToOwner'
      | 'nToken'
      | 'nft'
      | 'openCall'
      | 'openCallBatch'
      | 'oracle'
      | 'pause'
      | 'paused'
      | 'premium'
      | 'previewOpenCall'
      | 'relistNFT'
      | 'takeNFTOffMarket'
      | 'totalOpenInterest'
      | 'unpause'
      | 'withdraw'
      | 'withdrawETH'
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'INVALID_PRICE', values?: undefined): string
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'callToken', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'changePreference',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string
  encodeFunctionData(functionFragment: 'checkAvailable', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(
    functionFragment: 'collectProtocol',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'depositWithPreference',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string
  encodeFunctionData(functionFragment: 'exerciseCall', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'exercisePeriodProportion', values?: undefined): string
  encodeFunctionData(functionFragment: 'factory', values?: undefined): string
  encodeFunctionData(functionFragment: 'getNFTStatus', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'minimumPremiumToOwner', values?: undefined): string
  encodeFunctionData(functionFragment: 'nToken', values?: undefined): string
  encodeFunctionData(functionFragment: 'nft', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'openCall',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'openCallBatch',
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string
  encodeFunctionData(functionFragment: 'oracle', values?: undefined): string
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string
  encodeFunctionData(functionFragment: 'premium', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'previewOpenCall',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: 'relistNFT', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'takeNFTOffMarket', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'totalOpenInterest', values?: undefined): string
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'withdrawETH',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string

  decodeFunctionResult(functionFragment: 'INVALID_PRICE', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'callToken', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'changePreference', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'checkAvailable', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'collectProtocol', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'depositWithPreference', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'exerciseCall', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'exercisePeriodProportion', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'factory', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getNFTStatus', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'minimumPremiumToOwner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'nToken', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'nft', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'openCall', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'openCallBatch', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'oracle', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'premium', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'previewOpenCall', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'relistNFT', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'takeNFTOffMarket', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalOpenInterest', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdrawETH', data: BytesLike): Result

  events: {
    'BalanceChangedETH(address,uint256)': EventFragment
    'CallClosed(address,address,address,uint256,uint256)': EventFragment
    'CallOpened(address,address,uint256,uint256,uint256)': EventFragment
    'CollectProtocol(address,address,uint256)': EventFragment
    'Deposit(address,address,address,uint256)': EventFragment
    'DepositETH(address,address,uint256)': EventFragment
    'OffMarket(address,address,uint256)': EventFragment
    'OnMarket(address,address,uint256)': EventFragment
    'Paused(address)': EventFragment
    'PremiumReceived(address,address,uint256,uint256,uint256)': EventFragment
    'Unpaused(address)': EventFragment
    'Withdraw(address,address,address,uint256)': EventFragment
    'WithdrawETH(address,address,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'BalanceChangedETH'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'CallClosed'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'CallOpened'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'CollectProtocol'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'DepositETH'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OffMarket'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OnMarket'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PremiumReceived'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'WithdrawETH'): EventFragment
}

export interface BalanceChangedETHEventObject {
  user: string
  newBalance: BigNumber
}
export type BalanceChangedETHEvent = TypedEvent<[string, BigNumber], BalanceChangedETHEventObject>

export type BalanceChangedETHEventFilter = TypedEventFilter<BalanceChangedETHEvent>

export interface CallClosedEventObject {
  nft: string
  user: string
  owner: string
  tokenId: BigNumber
  price: BigNumber
}
export type CallClosedEvent = TypedEvent<[string, string, string, BigNumber, BigNumber], CallClosedEventObject>

export type CallClosedEventFilter = TypedEventFilter<CallClosedEvent>

export interface CallOpenedEventObject {
  nft: string
  user: string
  tokenId: BigNumber
  strikePriceGap: BigNumber
  duration: BigNumber
}
export type CallOpenedEvent = TypedEvent<[string, string, BigNumber, BigNumber, BigNumber], CallOpenedEventObject>

export type CallOpenedEventFilter = TypedEventFilter<CallOpenedEvent>

export interface CollectProtocolEventObject {
  sender: string
  recipient: string
  amount: BigNumber
}
export type CollectProtocolEvent = TypedEvent<[string, string, BigNumber], CollectProtocolEventObject>

export type CollectProtocolEventFilter = TypedEventFilter<CollectProtocolEvent>

export interface DepositEventObject {
  nft: string
  user: string
  onBehalfOf: string
  tokenId: BigNumber
}
export type DepositEvent = TypedEvent<[string, string, string, BigNumber], DepositEventObject>

export type DepositEventFilter = TypedEventFilter<DepositEvent>

export interface DepositETHEventObject {
  user: string
  receiver: string
  amount: BigNumber
}
export type DepositETHEvent = TypedEvent<[string, string, BigNumber], DepositETHEventObject>

export type DepositETHEventFilter = TypedEventFilter<DepositETHEvent>

export interface OffMarketEventObject {
  nft: string
  owner: string
  tokenId: BigNumber
}
export type OffMarketEvent = TypedEvent<[string, string, BigNumber], OffMarketEventObject>

export type OffMarketEventFilter = TypedEventFilter<OffMarketEvent>

export interface OnMarketEventObject {
  nft: string
  owner: string
  tokenId: BigNumber
}
export type OnMarketEvent = TypedEvent<[string, string, BigNumber], OnMarketEventObject>

export type OnMarketEventFilter = TypedEventFilter<OnMarketEvent>

export interface PausedEventObject {
  account: string
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>

export type PausedEventFilter = TypedEventFilter<PausedEvent>

export interface PremiumReceivedEventObject {
  nft: string
  owner: string
  tokenId: BigNumber
  premiumToOwner: BigNumber
  premiumToReserve: BigNumber
}
export type PremiumReceivedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  PremiumReceivedEventObject
>

export type PremiumReceivedEventFilter = TypedEventFilter<PremiumReceivedEvent>

export interface UnpausedEventObject {
  account: string
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>

export interface WithdrawEventObject {
  nft: string
  user: string
  to: string
  tokenId: BigNumber
}
export type WithdrawEvent = TypedEvent<[string, string, string, BigNumber], WithdrawEventObject>

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>

export interface WithdrawETHEventObject {
  user: string
  to: string
  amount: BigNumber
}
export type WithdrawETHEvent = TypedEvent<[string, string, BigNumber], WithdrawETHEventObject>

export type WithdrawETHEventFilter = TypedEventFilter<WithdrawETHEvent>

export interface CallPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: CallPoolInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    INVALID_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>

    balanceOf(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>

    callToken(overrides?: CallOverrides): Promise<[string]>

    changePreference(
      tokenId: PromiseOrValue<BigNumberish>,
      lowerStrikePriceGapIdx: PromiseOrValue<BigNumberish>,
      upperDurationIdx: PromiseOrValue<BigNumberish>,
      lowerLimitOfStrikePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    checkAvailable(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>

    collectProtocol(
      recipient: PromiseOrValue<string>,
      amountRequested: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    deposit(
      onBehalfOf: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    depositWithPreference(
      onBehalfOf: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      lowerStrikePriceGapIdx: PromiseOrValue<BigNumberish>,
      upperDurationIdx: PromiseOrValue<BigNumberish>,
      lowerLimitOfStrikePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    exerciseCall(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    exercisePeriodProportion(overrides?: CallOverrides): Promise<[number]>

    factory(overrides?: CallOverrides): Promise<[string]>

    getNFTStatus(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean, number, number, BigNumber]>

    minimumPremiumToOwner(overrides?: CallOverrides): Promise<[BigNumber]>

    nToken(overrides?: CallOverrides): Promise<[string]>

    nft(overrides?: CallOverrides): Promise<[string]>

    openCall(
      tokenId: PromiseOrValue<BigNumberish>,
      strikePriceGapIdx: PromiseOrValue<BigNumberish>,
      durationIdx: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    openCallBatch(
      tokenIds: PromiseOrValue<BigNumberish>[],
      strikePriceGaps: PromiseOrValue<BigNumberish>[],
      durations: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    oracle(overrides?: CallOverrides): Promise<[string]>

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    paused(overrides?: CallOverrides): Promise<[boolean]>

    premium(overrides?: CallOverrides): Promise<[string]>

    previewOpenCall(
      tokenId: PromiseOrValue<BigNumberish>,
      strikePriceGapIdx: PromiseOrValue<BigNumberish>,
      durationIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        strikePrice: BigNumber
        premiumToOwner: BigNumber
        premiumToReserve: BigNumber
        errorCode: BigNumber
      }
    >

    relistNFT(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    takeNFTOffMarket(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    totalOpenInterest(overrides?: CallOverrides): Promise<[BigNumber]>

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    withdraw(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    withdrawETH(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>
  }

  INVALID_PRICE(overrides?: CallOverrides): Promise<BigNumber>

  balanceOf(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

  callToken(overrides?: CallOverrides): Promise<string>

  changePreference(
    tokenId: PromiseOrValue<BigNumberish>,
    lowerStrikePriceGapIdx: PromiseOrValue<BigNumberish>,
    upperDurationIdx: PromiseOrValue<BigNumberish>,
    lowerLimitOfStrikePrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  checkAvailable(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>

  collectProtocol(
    recipient: PromiseOrValue<string>,
    amountRequested: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  deposit(
    onBehalfOf: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  depositWithPreference(
    onBehalfOf: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    lowerStrikePriceGapIdx: PromiseOrValue<BigNumberish>,
    upperDurationIdx: PromiseOrValue<BigNumberish>,
    lowerLimitOfStrikePrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  exerciseCall(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  exercisePeriodProportion(overrides?: CallOverrides): Promise<number>

  factory(overrides?: CallOverrides): Promise<string>

  getNFTStatus(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[boolean, boolean, number, number, BigNumber]>

  minimumPremiumToOwner(overrides?: CallOverrides): Promise<BigNumber>

  nToken(overrides?: CallOverrides): Promise<string>

  nft(overrides?: CallOverrides): Promise<string>

  openCall(
    tokenId: PromiseOrValue<BigNumberish>,
    strikePriceGapIdx: PromiseOrValue<BigNumberish>,
    durationIdx: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  openCallBatch(
    tokenIds: PromiseOrValue<BigNumberish>[],
    strikePriceGaps: PromiseOrValue<BigNumberish>[],
    durations: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  oracle(overrides?: CallOverrides): Promise<string>

  pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  paused(overrides?: CallOverrides): Promise<boolean>

  premium(overrides?: CallOverrides): Promise<string>

  previewOpenCall(
    tokenId: PromiseOrValue<BigNumberish>,
    strikePriceGapIdx: PromiseOrValue<BigNumberish>,
    durationIdx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      strikePrice: BigNumber
      premiumToOwner: BigNumber
      premiumToReserve: BigNumber
      errorCode: BigNumber
    }
  >

  relistNFT(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  takeNFTOffMarket(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  totalOpenInterest(overrides?: CallOverrides): Promise<BigNumber>

  unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  withdraw(
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  withdrawETH(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    INVALID_PRICE(overrides?: CallOverrides): Promise<BigNumber>

    balanceOf(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    callToken(overrides?: CallOverrides): Promise<string>

    changePreference(
      tokenId: PromiseOrValue<BigNumberish>,
      lowerStrikePriceGapIdx: PromiseOrValue<BigNumberish>,
      upperDurationIdx: PromiseOrValue<BigNumberish>,
      lowerLimitOfStrikePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    checkAvailable(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>

    collectProtocol(
      recipient: PromiseOrValue<string>,
      amountRequested: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    deposit(
      onBehalfOf: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    depositWithPreference(
      onBehalfOf: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      lowerStrikePriceGapIdx: PromiseOrValue<BigNumberish>,
      upperDurationIdx: PromiseOrValue<BigNumberish>,
      lowerLimitOfStrikePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    exerciseCall(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

    exercisePeriodProportion(overrides?: CallOverrides): Promise<number>

    factory(overrides?: CallOverrides): Promise<string>

    getNFTStatus(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean, number, number, BigNumber]>

    minimumPremiumToOwner(overrides?: CallOverrides): Promise<BigNumber>

    nToken(overrides?: CallOverrides): Promise<string>

    nft(overrides?: CallOverrides): Promise<string>

    openCall(
      tokenId: PromiseOrValue<BigNumberish>,
      strikePriceGapIdx: PromiseOrValue<BigNumberish>,
      durationIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    openCallBatch(
      tokenIds: PromiseOrValue<BigNumberish>[],
      strikePriceGaps: PromiseOrValue<BigNumberish>[],
      durations: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>

    oracle(overrides?: CallOverrides): Promise<string>

    pause(overrides?: CallOverrides): Promise<void>

    paused(overrides?: CallOverrides): Promise<boolean>

    premium(overrides?: CallOverrides): Promise<string>

    previewOpenCall(
      tokenId: PromiseOrValue<BigNumberish>,
      strikePriceGapIdx: PromiseOrValue<BigNumberish>,
      durationIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        strikePrice: BigNumber
        premiumToOwner: BigNumber
        premiumToReserve: BigNumber
        errorCode: BigNumber
      }
    >

    relistNFT(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

    takeNFTOffMarket(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

    totalOpenInterest(overrides?: CallOverrides): Promise<BigNumber>

    unpause(overrides?: CallOverrides): Promise<void>

    withdraw(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    withdrawETH(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>
  }

  filters: {
    'BalanceChangedETH(address,uint256)'(
      user?: PromiseOrValue<string> | null,
      newBalance?: null
    ): BalanceChangedETHEventFilter
    BalanceChangedETH(user?: PromiseOrValue<string> | null, newBalance?: null): BalanceChangedETHEventFilter

    'CallClosed(address,address,address,uint256,uint256)'(
      nft?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      owner?: null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      price?: null
    ): CallClosedEventFilter
    CallClosed(
      nft?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      owner?: null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      price?: null
    ): CallClosedEventFilter

    'CallOpened(address,address,uint256,uint256,uint256)'(
      nft?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      strikePriceGap?: null,
      duration?: null
    ): CallOpenedEventFilter
    CallOpened(
      nft?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      strikePriceGap?: null,
      duration?: null
    ): CallOpenedEventFilter

    'CollectProtocol(address,address,uint256)'(
      sender?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      amount?: null
    ): CollectProtocolEventFilter
    CollectProtocol(
      sender?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      amount?: null
    ): CollectProtocolEventFilter

    'Deposit(address,address,address,uint256)'(
      nft?: PromiseOrValue<string> | null,
      user?: null,
      onBehalfOf?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): DepositEventFilter
    Deposit(
      nft?: PromiseOrValue<string> | null,
      user?: null,
      onBehalfOf?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): DepositEventFilter

    'DepositETH(address,address,uint256)'(
      user?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null
    ): DepositETHEventFilter
    DepositETH(
      user?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null
    ): DepositETHEventFilter

    'OffMarket(address,address,uint256)'(
      nft?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): OffMarketEventFilter
    OffMarket(
      nft?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): OffMarketEventFilter

    'OnMarket(address,address,uint256)'(
      nft?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): OnMarketEventFilter
    OnMarket(
      nft?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): OnMarketEventFilter

    'Paused(address)'(account?: null): PausedEventFilter
    Paused(account?: null): PausedEventFilter

    'PremiumReceived(address,address,uint256,uint256,uint256)'(
      nft?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      premiumToOwner?: null,
      premiumToReserve?: null
    ): PremiumReceivedEventFilter
    PremiumReceived(
      nft?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      premiumToOwner?: null,
      premiumToReserve?: null
    ): PremiumReceivedEventFilter

    'Unpaused(address)'(account?: null): UnpausedEventFilter
    Unpaused(account?: null): UnpausedEventFilter

    'Withdraw(address,address,address,uint256)'(
      nft?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      to?: null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): WithdrawEventFilter
    Withdraw(
      nft?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      to?: null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): WithdrawEventFilter

    'WithdrawETH(address,address,uint256)'(
      user?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawETHEventFilter
    WithdrawETH(
      user?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawETHEventFilter
  }

  estimateGas: {
    INVALID_PRICE(overrides?: CallOverrides): Promise<BigNumber>

    balanceOf(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    callToken(overrides?: CallOverrides): Promise<BigNumber>

    changePreference(
      tokenId: PromiseOrValue<BigNumberish>,
      lowerStrikePriceGapIdx: PromiseOrValue<BigNumberish>,
      upperDurationIdx: PromiseOrValue<BigNumberish>,
      lowerLimitOfStrikePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    checkAvailable(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    collectProtocol(
      recipient: PromiseOrValue<string>,
      amountRequested: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    deposit(
      onBehalfOf: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    depositWithPreference(
      onBehalfOf: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      lowerStrikePriceGapIdx: PromiseOrValue<BigNumberish>,
      upperDurationIdx: PromiseOrValue<BigNumberish>,
      lowerLimitOfStrikePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    exerciseCall(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    exercisePeriodProportion(overrides?: CallOverrides): Promise<BigNumber>

    factory(overrides?: CallOverrides): Promise<BigNumber>

    getNFTStatus(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    minimumPremiumToOwner(overrides?: CallOverrides): Promise<BigNumber>

    nToken(overrides?: CallOverrides): Promise<BigNumber>

    nft(overrides?: CallOverrides): Promise<BigNumber>

    openCall(
      tokenId: PromiseOrValue<BigNumberish>,
      strikePriceGapIdx: PromiseOrValue<BigNumberish>,
      durationIdx: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    openCallBatch(
      tokenIds: PromiseOrValue<BigNumberish>[],
      strikePriceGaps: PromiseOrValue<BigNumberish>[],
      durations: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    oracle(overrides?: CallOverrides): Promise<BigNumber>

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    paused(overrides?: CallOverrides): Promise<BigNumber>

    premium(overrides?: CallOverrides): Promise<BigNumber>

    previewOpenCall(
      tokenId: PromiseOrValue<BigNumberish>,
      strikePriceGapIdx: PromiseOrValue<BigNumberish>,
      durationIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    relistNFT(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    takeNFTOffMarket(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    totalOpenInterest(overrides?: CallOverrides): Promise<BigNumber>

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    withdraw(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    withdrawETH(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    INVALID_PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>

    balanceOf(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    callToken(overrides?: CallOverrides): Promise<PopulatedTransaction>

    changePreference(
      tokenId: PromiseOrValue<BigNumberish>,
      lowerStrikePriceGapIdx: PromiseOrValue<BigNumberish>,
      upperDurationIdx: PromiseOrValue<BigNumberish>,
      lowerLimitOfStrikePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    checkAvailable(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    collectProtocol(
      recipient: PromiseOrValue<string>,
      amountRequested: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    deposit(
      onBehalfOf: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    depositWithPreference(
      onBehalfOf: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      lowerStrikePriceGapIdx: PromiseOrValue<BigNumberish>,
      upperDurationIdx: PromiseOrValue<BigNumberish>,
      lowerLimitOfStrikePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    exerciseCall(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    exercisePeriodProportion(overrides?: CallOverrides): Promise<PopulatedTransaction>

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getNFTStatus(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    minimumPremiumToOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    nToken(overrides?: CallOverrides): Promise<PopulatedTransaction>

    nft(overrides?: CallOverrides): Promise<PopulatedTransaction>

    openCall(
      tokenId: PromiseOrValue<BigNumberish>,
      strikePriceGapIdx: PromiseOrValue<BigNumberish>,
      durationIdx: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    openCallBatch(
      tokenIds: PromiseOrValue<BigNumberish>[],
      strikePriceGaps: PromiseOrValue<BigNumberish>[],
      durations: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

    premium(overrides?: CallOverrides): Promise<PopulatedTransaction>

    previewOpenCall(
      tokenId: PromiseOrValue<BigNumberish>,
      strikePriceGapIdx: PromiseOrValue<BigNumberish>,
      durationIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    relistNFT(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    takeNFTOffMarket(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    totalOpenInterest(overrides?: CallOverrides): Promise<PopulatedTransaction>

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

    withdraw(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    withdrawETH(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>
  }
}
