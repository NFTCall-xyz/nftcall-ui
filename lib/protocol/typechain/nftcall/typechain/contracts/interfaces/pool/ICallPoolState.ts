/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'

import type { OnEvent, PromiseOrValue, TypedEvent, TypedEventFilter, TypedListener } from '../../../common'

export interface ICallPoolStateInterface extends utils.Interface {
  functions: {
    'balanceOf(address)': FunctionFragment
    'getNFTStatus(uint256)': FunctionFragment
    'previewOpenCall(uint256,uint256,uint256)': FunctionFragment
    'totalOpenInterest()': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic: 'balanceOf' | 'getNFTStatus' | 'previewOpenCall' | 'totalOpenInterest'
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'getNFTStatus', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(
    functionFragment: 'previewOpenCall',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: 'totalOpenInterest', values?: undefined): string

  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getNFTStatus', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'previewOpenCall', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalOpenInterest', data: BytesLike): Result

  events: {}
}

export interface ICallPoolState extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: ICallPoolStateInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    balanceOf(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>

    getNFTStatus(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean, number, number, BigNumber]>

    previewOpenCall(
      tokenId: PromiseOrValue<BigNumberish>,
      strikePriceGapIdx: PromiseOrValue<BigNumberish>,
      durationIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        strikePrice: BigNumber
        premiumToOwner: BigNumber
        premiumToReserve: BigNumber
        errorCode: BigNumber
      }
    >

    totalOpenInterest(overrides?: CallOverrides): Promise<[BigNumber]>
  }

  balanceOf(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

  getNFTStatus(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[boolean, boolean, number, number, BigNumber]>

  previewOpenCall(
    tokenId: PromiseOrValue<BigNumberish>,
    strikePriceGapIdx: PromiseOrValue<BigNumberish>,
    durationIdx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      strikePrice: BigNumber
      premiumToOwner: BigNumber
      premiumToReserve: BigNumber
      errorCode: BigNumber
    }
  >

  totalOpenInterest(overrides?: CallOverrides): Promise<BigNumber>

  callStatic: {
    balanceOf(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    getNFTStatus(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean, number, number, BigNumber]>

    previewOpenCall(
      tokenId: PromiseOrValue<BigNumberish>,
      strikePriceGapIdx: PromiseOrValue<BigNumberish>,
      durationIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        strikePrice: BigNumber
        premiumToOwner: BigNumber
        premiumToReserve: BigNumber
        errorCode: BigNumber
      }
    >

    totalOpenInterest(overrides?: CallOverrides): Promise<BigNumber>
  }

  filters: {}

  estimateGas: {
    balanceOf(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    getNFTStatus(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    previewOpenCall(
      tokenId: PromiseOrValue<BigNumberish>,
      strikePriceGapIdx: PromiseOrValue<BigNumberish>,
      durationIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    totalOpenInterest(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    balanceOf(user: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getNFTStatus(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>

    previewOpenCall(
      tokenId: PromiseOrValue<BigNumberish>,
      strikePriceGapIdx: PromiseOrValue<BigNumberish>,
      durationIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    totalOpenInterest(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
