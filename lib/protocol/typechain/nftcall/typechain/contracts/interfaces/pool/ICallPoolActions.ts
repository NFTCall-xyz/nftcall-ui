/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'

import type { OnEvent, PromiseOrValue, TypedEvent, TypedEventFilter, TypedListener } from '../../../common'

export interface ICallPoolActionsInterface extends utils.Interface {
  functions: {
    'changePreference(uint256,uint8,uint8,uint256)': FunctionFragment
    'changePreferenceBatch(uint256[],uint8[],uint8[],uint256[])': FunctionFragment
    'deposit(address,uint256)': FunctionFragment
    'depositBatch(address,uint256[])': FunctionFragment
    'depositWithPreference(address,uint256,uint8,uint8,uint256)': FunctionFragment
    'depositWithPreferenceBatch(address,uint256[],uint8[],uint8[],uint256[])': FunctionFragment
    'exerciseCall(uint256)': FunctionFragment
    'exerciseCallBatch(uint256[])': FunctionFragment
    'openCall(uint256,uint8,uint8)': FunctionFragment
    'openCallBatch(uint256[],uint8[],uint8[])': FunctionFragment
    'relistNFT(uint256)': FunctionFragment
    'relistNFTBatch(uint256[])': FunctionFragment
    'takeNFTOffMarket(uint256)': FunctionFragment
    'takeNFTOffMarketBatch(uint256[])': FunctionFragment
    'withdraw(address,uint256)': FunctionFragment
    'withdrawBatch(address,uint256[])': FunctionFragment
    'withdrawETH(address,uint256)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'changePreference'
      | 'changePreferenceBatch'
      | 'deposit'
      | 'depositBatch'
      | 'depositWithPreference'
      | 'depositWithPreferenceBatch'
      | 'exerciseCall'
      | 'exerciseCallBatch'
      | 'openCall'
      | 'openCallBatch'
      | 'relistNFT'
      | 'relistNFTBatch'
      | 'takeNFTOffMarket'
      | 'takeNFTOffMarketBatch'
      | 'withdraw'
      | 'withdrawBatch'
      | 'withdrawETH'
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'changePreference',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'changePreferenceBatch',
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'depositBatch',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string
  encodeFunctionData(
    functionFragment: 'depositWithPreference',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'depositWithPreferenceBatch',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string
  encodeFunctionData(functionFragment: 'exerciseCall', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'exerciseCallBatch', values: [PromiseOrValue<BigNumberish>[]]): string
  encodeFunctionData(
    functionFragment: 'openCall',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'openCallBatch',
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string
  encodeFunctionData(functionFragment: 'relistNFT', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'relistNFTBatch', values: [PromiseOrValue<BigNumberish>[]]): string
  encodeFunctionData(functionFragment: 'takeNFTOffMarket', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'takeNFTOffMarketBatch', values: [PromiseOrValue<BigNumberish>[]]): string
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'withdrawBatch',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string
  encodeFunctionData(
    functionFragment: 'withdrawETH',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string

  decodeFunctionResult(functionFragment: 'changePreference', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'changePreferenceBatch', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'depositBatch', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'depositWithPreference', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'depositWithPreferenceBatch', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'exerciseCall', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'exerciseCallBatch', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'openCall', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'openCallBatch', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'relistNFT', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'relistNFTBatch', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'takeNFTOffMarket', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'takeNFTOffMarketBatch', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdrawBatch', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdrawETH', data: BytesLike): Result

  events: {}
}

export interface ICallPoolActions extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: ICallPoolActionsInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    changePreference(
      tokenId: PromiseOrValue<BigNumberish>,
      lowerStrikePriceGapIdx: PromiseOrValue<BigNumberish>,
      upperDurationIdx: PromiseOrValue<BigNumberish>,
      minimumStrikePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    changePreferenceBatch(
      tokenId: PromiseOrValue<BigNumberish>[],
      lowerStrikePriceGapIdxList: PromiseOrValue<BigNumberish>[],
      upperDurationIdxList: PromiseOrValue<BigNumberish>[],
      minimumStrikePriceList: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    deposit(
      onBehalfOf: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    depositBatch(
      onBehalfOf: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    depositWithPreference(
      onBehalfOf: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      lowerStrikePriceGapIdx: PromiseOrValue<BigNumberish>,
      upperDurationIdx: PromiseOrValue<BigNumberish>,
      minimumStrikePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    depositWithPreferenceBatch(
      onBehalfOf: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      lowerStrikePriceGapIdxList: PromiseOrValue<BigNumberish>[],
      upperDurationIdxList: PromiseOrValue<BigNumberish>[],
      minimumStrikePriceList: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    exerciseCall(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    exerciseCallBatch(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    openCall(
      tokenId: PromiseOrValue<BigNumberish>,
      strikePriceIdx: PromiseOrValue<BigNumberish>,
      durationIdx: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    openCallBatch(
      tokenIds: PromiseOrValue<BigNumberish>[],
      strikePrices: PromiseOrValue<BigNumberish>[],
      durations: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    relistNFT(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    relistNFTBatch(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    takeNFTOffMarket(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    takeNFTOffMarketBatch(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    withdraw(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    withdrawBatch(
      to: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    withdrawETH(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>
  }

  changePreference(
    tokenId: PromiseOrValue<BigNumberish>,
    lowerStrikePriceGapIdx: PromiseOrValue<BigNumberish>,
    upperDurationIdx: PromiseOrValue<BigNumberish>,
    minimumStrikePrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  changePreferenceBatch(
    tokenId: PromiseOrValue<BigNumberish>[],
    lowerStrikePriceGapIdxList: PromiseOrValue<BigNumberish>[],
    upperDurationIdxList: PromiseOrValue<BigNumberish>[],
    minimumStrikePriceList: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  deposit(
    onBehalfOf: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  depositBatch(
    onBehalfOf: PromiseOrValue<string>,
    tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  depositWithPreference(
    onBehalfOf: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    lowerStrikePriceGapIdx: PromiseOrValue<BigNumberish>,
    upperDurationIdx: PromiseOrValue<BigNumberish>,
    minimumStrikePrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  depositWithPreferenceBatch(
    onBehalfOf: PromiseOrValue<string>,
    tokenIds: PromiseOrValue<BigNumberish>[],
    lowerStrikePriceGapIdxList: PromiseOrValue<BigNumberish>[],
    upperDurationIdxList: PromiseOrValue<BigNumberish>[],
    minimumStrikePriceList: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  exerciseCall(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  exerciseCallBatch(
    tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  openCall(
    tokenId: PromiseOrValue<BigNumberish>,
    strikePriceIdx: PromiseOrValue<BigNumberish>,
    durationIdx: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  openCallBatch(
    tokenIds: PromiseOrValue<BigNumberish>[],
    strikePrices: PromiseOrValue<BigNumberish>[],
    durations: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  relistNFT(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  relistNFTBatch(
    tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  takeNFTOffMarket(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  takeNFTOffMarketBatch(
    tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  withdraw(
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  withdrawBatch(
    to: PromiseOrValue<string>,
    tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  withdrawETH(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    changePreference(
      tokenId: PromiseOrValue<BigNumberish>,
      lowerStrikePriceGapIdx: PromiseOrValue<BigNumberish>,
      upperDurationIdx: PromiseOrValue<BigNumberish>,
      minimumStrikePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    changePreferenceBatch(
      tokenId: PromiseOrValue<BigNumberish>[],
      lowerStrikePriceGapIdxList: PromiseOrValue<BigNumberish>[],
      upperDurationIdxList: PromiseOrValue<BigNumberish>[],
      minimumStrikePriceList: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>

    deposit(
      onBehalfOf: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    depositBatch(
      onBehalfOf: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>

    depositWithPreference(
      onBehalfOf: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      lowerStrikePriceGapIdx: PromiseOrValue<BigNumberish>,
      upperDurationIdx: PromiseOrValue<BigNumberish>,
      minimumStrikePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    depositWithPreferenceBatch(
      onBehalfOf: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      lowerStrikePriceGapIdxList: PromiseOrValue<BigNumberish>[],
      upperDurationIdxList: PromiseOrValue<BigNumberish>[],
      minimumStrikePriceList: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>

    exerciseCall(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

    exerciseCallBatch(tokenIds: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<BigNumber[]>

    openCall(
      tokenId: PromiseOrValue<BigNumberish>,
      strikePriceIdx: PromiseOrValue<BigNumberish>,
      durationIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    openCallBatch(
      tokenIds: PromiseOrValue<BigNumberish>[],
      strikePrices: PromiseOrValue<BigNumberish>[],
      durations: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>

    relistNFT(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

    relistNFTBatch(tokenIds: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<BigNumber[]>

    takeNFTOffMarket(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

    takeNFTOffMarketBatch(tokenIds: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<BigNumber[]>

    withdraw(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    withdrawBatch(
      to: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>

    withdrawETH(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>
  }

  filters: {}

  estimateGas: {
    changePreference(
      tokenId: PromiseOrValue<BigNumberish>,
      lowerStrikePriceGapIdx: PromiseOrValue<BigNumberish>,
      upperDurationIdx: PromiseOrValue<BigNumberish>,
      minimumStrikePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    changePreferenceBatch(
      tokenId: PromiseOrValue<BigNumberish>[],
      lowerStrikePriceGapIdxList: PromiseOrValue<BigNumberish>[],
      upperDurationIdxList: PromiseOrValue<BigNumberish>[],
      minimumStrikePriceList: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    deposit(
      onBehalfOf: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    depositBatch(
      onBehalfOf: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    depositWithPreference(
      onBehalfOf: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      lowerStrikePriceGapIdx: PromiseOrValue<BigNumberish>,
      upperDurationIdx: PromiseOrValue<BigNumberish>,
      minimumStrikePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    depositWithPreferenceBatch(
      onBehalfOf: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      lowerStrikePriceGapIdxList: PromiseOrValue<BigNumberish>[],
      upperDurationIdxList: PromiseOrValue<BigNumberish>[],
      minimumStrikePriceList: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    exerciseCall(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    exerciseCallBatch(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    openCall(
      tokenId: PromiseOrValue<BigNumberish>,
      strikePriceIdx: PromiseOrValue<BigNumberish>,
      durationIdx: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    openCallBatch(
      tokenIds: PromiseOrValue<BigNumberish>[],
      strikePrices: PromiseOrValue<BigNumberish>[],
      durations: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    relistNFT(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    relistNFTBatch(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    takeNFTOffMarket(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    takeNFTOffMarketBatch(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    withdraw(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    withdrawBatch(
      to: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    withdrawETH(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    changePreference(
      tokenId: PromiseOrValue<BigNumberish>,
      lowerStrikePriceGapIdx: PromiseOrValue<BigNumberish>,
      upperDurationIdx: PromiseOrValue<BigNumberish>,
      minimumStrikePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    changePreferenceBatch(
      tokenId: PromiseOrValue<BigNumberish>[],
      lowerStrikePriceGapIdxList: PromiseOrValue<BigNumberish>[],
      upperDurationIdxList: PromiseOrValue<BigNumberish>[],
      minimumStrikePriceList: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    deposit(
      onBehalfOf: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    depositBatch(
      onBehalfOf: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    depositWithPreference(
      onBehalfOf: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      lowerStrikePriceGapIdx: PromiseOrValue<BigNumberish>,
      upperDurationIdx: PromiseOrValue<BigNumberish>,
      minimumStrikePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    depositWithPreferenceBatch(
      onBehalfOf: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      lowerStrikePriceGapIdxList: PromiseOrValue<BigNumberish>[],
      upperDurationIdxList: PromiseOrValue<BigNumberish>[],
      minimumStrikePriceList: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    exerciseCall(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    exerciseCallBatch(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    openCall(
      tokenId: PromiseOrValue<BigNumberish>,
      strikePriceIdx: PromiseOrValue<BigNumberish>,
      durationIdx: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    openCallBatch(
      tokenIds: PromiseOrValue<BigNumberish>[],
      strikePrices: PromiseOrValue<BigNumberish>[],
      durations: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    relistNFT(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    relistNFTBatch(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    takeNFTOffMarket(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    takeNFTOffMarketBatch(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    withdraw(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    withdrawBatch(
      to: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    withdrawETH(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>
  }
}
