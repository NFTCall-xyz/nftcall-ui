/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'
import type { Provider, TransactionRequest } from '@ethersproject/providers'
import type { PromiseOrValue } from '../../common'
import type { Errors, ErrorsInterface } from '../../contracts/Errors'

const _abi = [
  {
    inputs: [] as any,
    name: 'CP_ARRAY_LENGTH_UNMATCHED',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_CALLER_IS_NOT_FACTORY_OWNER',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_CAN_NOT_OPEN_CALL',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_DID_NOT_SEND_ENOUGHT_ETH',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_GAP_OR_DURATION_OUT_OF_INDEX',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_INVALID_AMOUNT',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_INVALID_RECEIVER',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_NFT_ON_MARKET_OR_UNABAILABLE',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_NOT_ENOUGH_BALANCE',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_NOT_IN_THE_EXERCISE_PERIOD',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_NOT_THE_OWNER',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
]

const _bytecode =
  '0x6102bb61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100b35760003560e01c806395168aa51161007b57806395168aa5146101705780639540024814610190578063ba6f6fff146101b0578063bf480ec4146101d0578063da38f4d1146101f0578063df2aef451461021057600080fd5b80632290440d146100b857806327aa65fd146100ee5780633fabcc6a1461010e57806351c424571461012e5780636add4c0b1461014f575b600080fd5b6100d8604051806040016040528060018152602001603160f81b81525081565b6040516100e59190610230565b60405180910390f35b6100d8604051806040016040528060018152602001603360f81b81525081565b6100d8604051806040016040528060018152602001601960f91b81525081565b6100d860405180604001604052806002815260200161031360f41b81525081565b6100d860405180604001604052806002815260200161313160f01b81525081565b6100d8604051806040016040528060018152602001600760fb1b81525081565b6100d8604051806040016040528060018152602001603760f81b81525081565b6100d8604051806040016040528060018152602001600d60fa1b81525081565b6100d8604051806040016040528060018152602001603960f81b81525081565b6100d8604051806040016040528060018152602001601b60f91b81525081565b6100d8604051806040016040528060018152602001603560f81b81525081565b600060208083528351808285015260005b8181101561025d57858101830151858201604001528201610241565b8181111561026f576000604083870101525b50601f01601f191692909201604001939250505056fea26469706673582212201274e4b1cb8bac65d0ebdb237f6ec4429703366e51c6ad10228c6f51556f105364736f6c63430008090033'

type ErrorsConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (xs: ErrorsConstructorParams): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1

export class Errors__factory extends ContractFactory {
  constructor(...args: ErrorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args)
    } else {
      super(_abi, _bytecode, args[0])
    }
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<Errors> {
    return super.deploy(overrides || {}) as Promise<Errors>
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {})
  }
  override attach(address: string): Errors {
    return super.attach(address) as Errors
  }
  override connect(signer: Signer): Errors__factory {
    return super.connect(signer) as Errors__factory
  }

  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): ErrorsInterface {
    return new utils.Interface(_abi) as ErrorsInterface
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Errors {
    return new Contract(address, _abi, signerOrProvider) as Errors
  }
}
