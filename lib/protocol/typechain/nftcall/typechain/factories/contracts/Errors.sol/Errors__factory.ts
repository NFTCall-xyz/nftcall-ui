/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'
import type { Provider, TransactionRequest } from '@ethersproject/providers'
import type { PromiseOrValue } from '../../../common'
import type { Errors, ErrorsInterface } from '../../../contracts/Errors.sol/Errors'

const _abi = [
  {
    inputs: [],
    name: 'CP_ARRAY_LENGTH_UNMATCHED',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'CP_CALLER_IS_NOT_FACTORY_OWNER',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'CP_CAN_NOT_OPEN_CALL',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'CP_DID_NOT_SEND_ENOUGHT_ETH',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'CP_DURATION_TOO_LONG',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'CP_GAP_OR_DURATION_OUT_OF_INDEX',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'CP_INVALID_AMOUNT',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'CP_INVALID_RECEIVER',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'CP_NFT_ON_MARKET_OR_UNABAILABLE',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'CP_NOT_ENOUGH_BALANCE',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'CP_NOT_IN_THE_EXERCISE_PERIOD',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'CP_NOT_THE_OWNER',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'CP_PREMIUM_AND_ETH_UNEQUAL',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'CP_STRIKE_GAP_TOO_LOW',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'CP_STRIKE_PRICE_TOO_LOW',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'CP_TOO_LITTLE_PREMIUM_TO_OWNER',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
]

const _bytecode =
  '0x6103b761003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061010a5760003560e01c806391eabf36116100a1578063bf480ec411610070578063bf480ec4146102ab578063da38f4d1146102cb578063df2aef45146102eb578063ed5f7fb81461030b57600080fd5b806391eabf361461022a57806395168aa51461024b578063954002481461026b578063ba6f6fff1461028b57600080fd5b8063558c0e9a116100dd578063558c0e9a146101a65780636add4c0b146101c75780636ea0eb47146101e85780638b7a2e6b1461020957600080fd5b80632290440d1461010f57806327aa65fd146101455780633fabcc6a1461016557806351c4245714610185575b600080fd5b61012f604051806040016040528060018152602001603160f81b81525081565b60405161013c919061032c565b60405180910390f35b61012f604051806040016040528060018152602001603360f81b81525081565b61012f604051806040016040528060018152602001601960f91b81525081565b61012f60405180604001604052806002815260200161031360f41b81525081565b61012f60405180604001604052806002815260200161313360f01b81525081565b61012f60405180604001604052806002815260200161313160f01b81525081565b61012f60405180604001604052806002815260200161189960f11b81525081565b61012f604051806040016040528060028152602001610c4d60f21b81525081565b61012f60405180604001604052806002815260200161313560f01b81525081565b61012f604051806040016040528060018152602001600760fb1b81525081565b61012f604051806040016040528060018152602001603760f81b81525081565b61012f604051806040016040528060018152602001600d60fa1b81525081565b61012f604051806040016040528060018152602001603960f81b81525081565b61012f604051806040016040528060018152602001601b60f91b81525081565b61012f604051806040016040528060018152602001603560f81b81525081565b61012f60405180604001604052806002815260200161189b60f11b81525081565b600060208083528351808285015260005b818110156103595785810183015185820160400152820161033d565b8181111561036b576000604083870101525b50601f01601f191692909201604001939250505056fea2646970667358221220e1d32bd75b1a97303aab4f26311d5c67a39199b329b00af00cf21a73e97b33dd64736f6c63430008090033'

type ErrorsConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (xs: ErrorsConstructorParams): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1

export class Errors__factory extends ContractFactory {
  constructor(...args: ErrorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args)
    } else {
      super(_abi, _bytecode, args[0])
    }
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<Errors> {
    return super.deploy(overrides || {}) as Promise<Errors>
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {})
  }
  override attach(address: string): Errors {
    return super.attach(address) as Errors
  }
  override connect(signer: Signer): Errors__factory {
    return super.connect(signer) as Errors__factory
  }

  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): ErrorsInterface {
    return new utils.Interface(_abi) as ErrorsInterface
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Errors {
    return new Contract(address, _abi, signerOrProvider) as Errors
  }
}
