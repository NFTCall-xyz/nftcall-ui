/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { Provider, TransactionRequest } from '@ethersproject/providers'
import { Contract, ContractFactory, Overrides, Signer, utils } from 'ethers'

import type { PromiseOrValue } from '../../../common'
import type { ErrorCodes, ErrorCodesInterface } from '../../../contracts/Errors.sol/ErrorCodes'

const _abi = [
  {
    inputs: [] as any,
    name: 'CP_ACTIVATED',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_ARRAY_LENGTH_UNMATCHED',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_CALLER_IS_NOT_FACTORY_OWNER',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_CAN_NOT_OPEN_A_POSITION_ON_SELF_OWNED_NFT',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_CAN_NOT_OPEN_CALL',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_DEACTIVATED',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_DID_NOT_SEND_ENOUGHT_ETH',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_DURATION_TOO_LONG',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_GAP_OR_DURATION_OUT_OF_INDEX',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_INVALID_AMOUNT',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_INVALID_RECEIVER',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_NFT_ON_MARKET_OR_UNABAILABLE',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_NOT_ENOUGH_BALANCE',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_NOT_IN_THE_EXERCISE_PERIOD',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_NOT_THE_OWNER',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_PREMIUM_AND_ETH_UNEQUAL',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_PRICE_TOO_HIGH',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_STRIKE_GAP_TOO_LOW',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_STRIKE_PRICE_TOO_LOW',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_TOO_LITTLE_PREMIUM_TO_OWNER',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
]

const _bytecode =
  '0x61022361003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106101365760003560e01c806395168aa5116100b7578063da38f4d11161007b578063da38f4d1146101c5578063df2aef45146101cd578063e016ebfe146101d5578063e95389da146101dd578063ed5f7fb8146101e557600080fd5b806395168aa51461019d57806395400248146101a5578063ba6f6fff146101ad578063bf480ec4146101b5578063d979da05146101bd57600080fd5b8063558c0e9a116100fe578063558c0e9a146101755780636add4c0b1461017d5780636ea0eb47146101855780638b7a2e6b1461018d57806391eabf361461019557600080fd5b80630c73f7201461013b5780632290440d1461015557806327aa65fd1461015d5780633fabcc6a1461016557806351c424571461016d575b600080fd5b610143601181565b60405190815260200160405180910390f35b610143600181565b610143600381565b610143600281565b610143600a81565b610143600d81565b610143600b81565b610143600c81565b610143600e81565b610143600f81565b610143600881565b610143600781565b610143600481565b610143600981565b610143601481565b610143600681565b610143600581565b610143601381565b610143601281565b61014360108156fea26469706673582212201e684b954f4c37f627bcf267a96b30a2f0cdefb3df0d797adf888173eb317ca164736f6c63430008090033'

type ErrorCodesConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (xs: ErrorCodesConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1

export class ErrorCodes__factory extends ContractFactory {
  constructor(...args: ErrorCodesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args)
    } else {
      super(_abi, _bytecode, args[0])
    }
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ErrorCodes> {
    return super.deploy(overrides || {}) as Promise<ErrorCodes>
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {})
  }
  override attach(address: string): ErrorCodes {
    return super.attach(address) as ErrorCodes
  }
  override connect(signer: Signer): ErrorCodes__factory {
    return super.connect(signer) as ErrorCodes__factory
  }

  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): ErrorCodesInterface {
    return new utils.Interface(_abi) as ErrorCodesInterface
  }
  static connect(address: string, signerOrProvider: Signer | Provider): ErrorCodes {
    return new Contract(address, _abi, signerOrProvider) as ErrorCodes
  }
}
