/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { Provider, TransactionRequest } from '@ethersproject/providers'
import { Contract, ContractFactory, Overrides, Signer, utils } from 'ethers'

import type { PromiseOrValue } from '../../../common'
import type { ErrorCodes, ErrorCodesInterface } from '../../../contracts/Errors.sol/ErrorCodes'

const _abi = [
  {
    inputs: [] as any,
    name: 'CP_ACTIVATED',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_ARRAY_LENGTH_UNMATCHED',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_CALLER_IS_NOT_FACTORY_OWNER',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_CAN_NOT_OPEN_A_POSITION_ON_SELF_OWNED_NFT',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_CAN_NOT_OPEN_CALL',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_DEACTIVATED',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_DID_NOT_SEND_ENOUGH_ETH',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_DURATION_TOO_LONG',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_GAP_OR_DURATION_OUT_OF_INDEX',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_INVALID_AMOUNT',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_INVALID_RECEIVER',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_NFT_ON_MARKET_OR_UNAVAILABLE',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_NOT_ENOUGH_BALANCE',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_NOT_IN_THE_EXERCISE_PERIOD',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_NOT_THE_OWNER',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_PREMIUM_AND_ETH_UNEQUAL',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_PRICE_TOO_HIGH',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_STRIKE_GAP_TOO_LOW',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_STRIKE_PRICE_TOO_LOW',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_TOO_LITTLE_PREMIUM_TO_OWNER',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_UNABLE_TO_TRANSFER_ETH',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'CP_ZERO_SIZED_ARRAY',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
]

const _bytecode =
  '0x61024961003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061014c5760003560e01c806395168aa5116100c2578063da38f4d111610086578063da38f4d1146101e3578063df2aef45146101eb578063e016ebfe146101f3578063e81c8408146101fb578063e95389da14610203578063ed5f7fb81461020b57600080fd5b806395168aa5146101bb57806395400248146101c3578063b15bc5f6146101cb578063ba6f6fff146101d3578063d979da05146101db57600080fd5b8063558c0e9a11610114578063558c0e9a1461018b5780635bbaa0c1146101935780636add4c0b1461019b5780636ea0eb47146101a35780638b7a2e6b146101ab57806391eabf36146101b357600080fd5b80630c73f720146101515780631741c9f41461016b5780632290440d146101735780633fabcc6a1461017b57806351c4245714610183575b600080fd5b610159601181565b60405190815260200160405180910390f35b610159601581565b610159600181565b610159600281565b610159600a81565b610159600d81565b610159600381565b610159600b81565b610159600c81565b610159600e81565b610159600f81565b610159600881565b610159600781565b610159600981565b610159600481565b610159601481565b610159600681565b610159600581565b610159601381565b610159601681565b610159601281565b61015960108156fea2646970667358221220018347f114e2f250a591889217ae27cd19ecb89c3bbdd8c3e268b617a874f71c64736f6c63430008090033'

type ErrorCodesConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (xs: ErrorCodesConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1

export class ErrorCodes__factory extends ContractFactory {
  constructor(...args: ErrorCodesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args)
    } else {
      super(_abi, _bytecode, args[0])
    }
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ErrorCodes> {
    return super.deploy(overrides || {}) as Promise<ErrorCodes>
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {})
  }
  override attach(address: string): ErrorCodes {
    return super.attach(address) as ErrorCodes
  }
  override connect(signer: Signer): ErrorCodes__factory {
    return super.connect(signer) as ErrorCodes__factory
  }

  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): ErrorCodesInterface {
    return new utils.Interface(_abi) as ErrorCodesInterface
  }
  static connect(address: string, signerOrProvider: Signer | Provider): ErrorCodes {
    return new Contract(address, _abi, signerOrProvider) as ErrorCodes
  }
}
